Sep-8, 7:30pm - 8:45pm
  -Attendees: Rudro, Anna, Michael, Nifemi, Yuri
  -Discussed Project 1, began writing code to print board and game to terminal.
  -Decided to make an executive class, a class to handle outputs, and define the boards 
   using 2-D arrays.
  -Discussed splitting into pairs to work on class definitions.
  -Attempted to collaborate using Visual Studio Code Live Share.
  
Sep-9, 1:15pm - 3:50pm
  -Attendees: Nifemi, Anna, Rudro, Michael (after 1:30pm), Yuri (after 2:20pm)
  -Continued to discuss how to define the game boards, including symbols to denote spaces 
   and storage of the boards information (decided to define a Grid class).
  -Next meeting set for Saturday Sep-11 at 12:00pm.
  -GOAL BEFORE NEXT MEETING: print a single player board to the terminal, with one ship 
   populating the board.
  -TASKS:
    -Rudro: define a method to check player input validity and a method to print the board.
	-Yuri: define a method to set a 1X1 ship onto the board and a method to retrieve values 
	 from the board stored in a Grid class object.
	-Michael: begin to brainstorm a list of stress tests for the program in general.
	
Sep-11, 10:20am - 1:20pm
  -ATTENDEES: Michael, Rudro, Anna, Yuri, Nifemi
  -Discussed documentation of project, including general groundrules for pushing local repos
   once they compile and how to write commit messages.
  -Continued to define methods for printing a board to the terminal, using Michael's prototype
   source code.
  -DECISIONS:
    -Established a list of responsibilities for the Executive, Game, and Grid classes.
    -Decided to use Doxygen as our document generator.
    -Decided to include "demo" in any files used for testing or experimentation.
    -Decided to "clear" the terminal between player turns by using newline '\n'.
    -Decided to print the two boards per turn vertically to simplify the code required to print.
    -Initially decided to prevent ships from being placed adjacent to each other, but it would 
     take 72 out of 90 spaces to place the max number of ships allowed (6). Thus, we decided
     to allow adjacent placement for greater variety of choices.
    -Decided to denote empty board spaces with '*' instead of 'O'.
  -TASKS:
    -Nifemi: continue to work on code until it compiles and successfully prints a board.
	-Michael: add file of class responsibilities to repository.
	-Rudro: begin to define code to handle direction of ship placement.
	-Yuri: generate required documents as per rubric (work hours, estimate of work hours, works 
	 cited), brainstorm/declare methods for the classes as per Michael's responsibilities list.
	 
Sep-13, 8:30pm - 10:30pm
  -ATTENDEES: Yuri, Nifemi, Anna, Rudro, Michael
  -DECISIONS:
    -Use 1 board per player instead of 2 by printing the opponent's untouched ships as '*'
	-Discussed using newlines to clear the terminal again.
	-We will first write all the code needed for player 1's board to play, then we will incorporate player 2's board at all necessary levels of code.
  -TASKS:
    -Michael: begin to define a function that handles player turns.
	-Nifemi: begin to reorganize the Grid class's setShip and checkValidLocation's for loops.
	-Rudro and Anna: debug ship placement onto board.
	-Yuri: finish defining isHit function in the Game class.
	
Sep-15, 7:30pm - 
  -ATTENDEES: Rudro, Ann, Michael, Nifemi, Yuri(left at 8:42)
  -Worked on incorporating the 2nd player into the program, defining the playGame method,
   and writing doxygen comments in the header files.
  -DECISIONS:
    -Each player will be represented by one Grid object.
	-Use newlines to clear the board, ask the next player when they're ready, then print the player's board.
	-Pass pointers to the grid objects to the Game class instead of the object itself.
  -GOAL: full functionality by end of Friday Sep-17.